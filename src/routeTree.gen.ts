/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SubscriptionsImport } from './routes/subscriptions'
import { Route as StreamsImport } from './routes/streams'
import { Route as StatsImport } from './routes/stats'
import { Route as ServersImport } from './routes/servers'
import { Route as ProjectionsImport } from './routes/projections'
import { Route as ManageAggregatesImport } from './routes/manage-aggregates'
import { Route as LoginImport } from './routes/login'
import { Route as CeBinarySearchImport } from './routes/ce-binary-search'
import { Route as AnalyzeImport } from './routes/analyze'
import { Route as AggregatesImport } from './routes/aggregates'
import { Route as IndexImport } from './routes/index'
import { Route as StreamsStreamIdImport } from './routes/streams.$streamId'

// Create/Update Routes

const SubscriptionsRoute = SubscriptionsImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => rootRoute,
} as any)

const StreamsRoute = StreamsImport.update({
  id: '/streams',
  path: '/streams',
  getParentRoute: () => rootRoute,
} as any)

const StatsRoute = StatsImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any)

const ServersRoute = ServersImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => rootRoute,
} as any)

const ProjectionsRoute = ProjectionsImport.update({
  id: '/projections',
  path: '/projections',
  getParentRoute: () => rootRoute,
} as any)

const ManageAggregatesRoute = ManageAggregatesImport.update({
  id: '/manage-aggregates',
  path: '/manage-aggregates',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CeBinarySearchRoute = CeBinarySearchImport.update({
  id: '/ce-binary-search',
  path: '/ce-binary-search',
  getParentRoute: () => rootRoute,
} as any)

const AnalyzeRoute = AnalyzeImport.update({
  id: '/analyze',
  path: '/analyze',
  getParentRoute: () => rootRoute,
} as any)

const AggregatesRoute = AggregatesImport.update({
  id: '/aggregates',
  path: '/aggregates',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StreamsStreamIdRoute = StreamsStreamIdImport.update({
  id: '/$streamId',
  path: '/$streamId',
  getParentRoute: () => StreamsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/aggregates': {
      id: '/aggregates'
      path: '/aggregates'
      fullPath: '/aggregates'
      preLoaderRoute: typeof AggregatesImport
      parentRoute: typeof rootRoute
    }
    '/analyze': {
      id: '/analyze'
      path: '/analyze'
      fullPath: '/analyze'
      preLoaderRoute: typeof AnalyzeImport
      parentRoute: typeof rootRoute
    }
    '/ce-binary-search': {
      id: '/ce-binary-search'
      path: '/ce-binary-search'
      fullPath: '/ce-binary-search'
      preLoaderRoute: typeof CeBinarySearchImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/manage-aggregates': {
      id: '/manage-aggregates'
      path: '/manage-aggregates'
      fullPath: '/manage-aggregates'
      preLoaderRoute: typeof ManageAggregatesImport
      parentRoute: typeof rootRoute
    }
    '/projections': {
      id: '/projections'
      path: '/projections'
      fullPath: '/projections'
      preLoaderRoute: typeof ProjectionsImport
      parentRoute: typeof rootRoute
    }
    '/servers': {
      id: '/servers'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof ServersImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsImport
      parentRoute: typeof rootRoute
    }
    '/streams': {
      id: '/streams'
      path: '/streams'
      fullPath: '/streams'
      preLoaderRoute: typeof StreamsImport
      parentRoute: typeof rootRoute
    }
    '/subscriptions': {
      id: '/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof SubscriptionsImport
      parentRoute: typeof rootRoute
    }
    '/streams/$streamId': {
      id: '/streams/$streamId'
      path: '/$streamId'
      fullPath: '/streams/$streamId'
      preLoaderRoute: typeof StreamsStreamIdImport
      parentRoute: typeof StreamsImport
    }
  }
}

// Create and export the route tree

interface StreamsRouteChildren {
  StreamsStreamIdRoute: typeof StreamsStreamIdRoute
}

const StreamsRouteChildren: StreamsRouteChildren = {
  StreamsStreamIdRoute: StreamsStreamIdRoute,
}

const StreamsRouteWithChildren =
  StreamsRoute._addFileChildren(StreamsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/aggregates': typeof AggregatesRoute
  '/analyze': typeof AnalyzeRoute
  '/ce-binary-search': typeof CeBinarySearchRoute
  '/login': typeof LoginRoute
  '/manage-aggregates': typeof ManageAggregatesRoute
  '/projections': typeof ProjectionsRoute
  '/servers': typeof ServersRoute
  '/stats': typeof StatsRoute
  '/streams': typeof StreamsRouteWithChildren
  '/subscriptions': typeof SubscriptionsRoute
  '/streams/$streamId': typeof StreamsStreamIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/aggregates': typeof AggregatesRoute
  '/analyze': typeof AnalyzeRoute
  '/ce-binary-search': typeof CeBinarySearchRoute
  '/login': typeof LoginRoute
  '/manage-aggregates': typeof ManageAggregatesRoute
  '/projections': typeof ProjectionsRoute
  '/servers': typeof ServersRoute
  '/stats': typeof StatsRoute
  '/streams': typeof StreamsRouteWithChildren
  '/subscriptions': typeof SubscriptionsRoute
  '/streams/$streamId': typeof StreamsStreamIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/aggregates': typeof AggregatesRoute
  '/analyze': typeof AnalyzeRoute
  '/ce-binary-search': typeof CeBinarySearchRoute
  '/login': typeof LoginRoute
  '/manage-aggregates': typeof ManageAggregatesRoute
  '/projections': typeof ProjectionsRoute
  '/servers': typeof ServersRoute
  '/stats': typeof StatsRoute
  '/streams': typeof StreamsRouteWithChildren
  '/subscriptions': typeof SubscriptionsRoute
  '/streams/$streamId': typeof StreamsStreamIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/aggregates'
    | '/analyze'
    | '/ce-binary-search'
    | '/login'
    | '/manage-aggregates'
    | '/projections'
    | '/servers'
    | '/stats'
    | '/streams'
    | '/subscriptions'
    | '/streams/$streamId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/aggregates'
    | '/analyze'
    | '/ce-binary-search'
    | '/login'
    | '/manage-aggregates'
    | '/projections'
    | '/servers'
    | '/stats'
    | '/streams'
    | '/subscriptions'
    | '/streams/$streamId'
  id:
    | '__root__'
    | '/'
    | '/aggregates'
    | '/analyze'
    | '/ce-binary-search'
    | '/login'
    | '/manage-aggregates'
    | '/projections'
    | '/servers'
    | '/stats'
    | '/streams'
    | '/subscriptions'
    | '/streams/$streamId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AggregatesRoute: typeof AggregatesRoute
  AnalyzeRoute: typeof AnalyzeRoute
  CeBinarySearchRoute: typeof CeBinarySearchRoute
  LoginRoute: typeof LoginRoute
  ManageAggregatesRoute: typeof ManageAggregatesRoute
  ProjectionsRoute: typeof ProjectionsRoute
  ServersRoute: typeof ServersRoute
  StatsRoute: typeof StatsRoute
  StreamsRoute: typeof StreamsRouteWithChildren
  SubscriptionsRoute: typeof SubscriptionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AggregatesRoute: AggregatesRoute,
  AnalyzeRoute: AnalyzeRoute,
  CeBinarySearchRoute: CeBinarySearchRoute,
  LoginRoute: LoginRoute,
  ManageAggregatesRoute: ManageAggregatesRoute,
  ProjectionsRoute: ProjectionsRoute,
  ServersRoute: ServersRoute,
  StatsRoute: StatsRoute,
  StreamsRoute: StreamsRouteWithChildren,
  SubscriptionsRoute: SubscriptionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/aggregates",
        "/analyze",
        "/ce-binary-search",
        "/login",
        "/manage-aggregates",
        "/projections",
        "/servers",
        "/stats",
        "/streams",
        "/subscriptions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/aggregates": {
      "filePath": "aggregates.tsx"
    },
    "/analyze": {
      "filePath": "analyze.tsx"
    },
    "/ce-binary-search": {
      "filePath": "ce-binary-search.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/manage-aggregates": {
      "filePath": "manage-aggregates.tsx"
    },
    "/projections": {
      "filePath": "projections.tsx"
    },
    "/servers": {
      "filePath": "servers.tsx"
    },
    "/stats": {
      "filePath": "stats.tsx"
    },
    "/streams": {
      "filePath": "streams.tsx",
      "children": [
        "/streams/$streamId"
      ]
    },
    "/subscriptions": {
      "filePath": "subscriptions.tsx"
    },
    "/streams/$streamId": {
      "filePath": "streams.$streamId.tsx",
      "parent": "/streams"
    }
  }
}
ROUTE_MANIFEST_END */
